Cameron O'Leary <coleary9@jhu.edu>
Steve Griffin  <sgriff27@jhu.edu>
Jeremy Dolinko <j.dolinko@gmail.com>
Jonathan Rivera <jriver21@jhu.edu>
Michael Shavit  <shavitmichael@gmail.com>

Usage: python main.py

Additional Usages:
    Profiling:
        python -m cProfile -s cumtime main.py > prof.txt
    Debug mode:
        python main.py -d
    Deployment of assignment 6:
        ./deploy.py 6
    Pylint:
        pylint -d C0103 <filename>.py

Controls:
jump = up key
left and right = left and right keys
x = attack
s = special attack
lctrl = block
up and down = change menu choice
shift = change character(one jumps high the other is fast)
enter = select menu choice. It also serves a back button
        for returning to the menu from the game or high scores.
esc = quit game immediately

We have one working player and 10 random moving enemies.
The player makes a thud when he hits a wall, as do the enemies.
The player can also jump (up) and attack using X.

To play the first level, move and jump and attack as you please,
 try and make it to the end!

If you finish the level by getting to the end
you will be prompted to enter your name for a highscore, highscores
can be viewed form the menu.
Enter is default quit menu.

You die if your health runs out which is negatively affected everytime
you get hit

SCORING 
Everytime you kill an enemy you get 100 points. If you die either from
enemy attacks or from falling off the map
you go to the lose screen and cannot enter a highscore. If you get to 
the end of the level you go to the win screen and get to enter a new highscore.
 It should be noted that both the lose and win screens are stored in
youWin.py and use whether you are allowed to enter a new score
(controlled by glob.newScore) to know whether you win or lose.
Since if you die you aren't allwed to enter a new score, but if you
finish you are.

Debug mode:
debug mode gives you frames per second, in the top left hand corner.
makes your strike box visible, and also shows the flags for enemy
jumping on each tile which tells them which way to jump

Settings:
    Resolution:
        Luckily, we are no longer living in 1994, and games are not limited
        to 800 x 600. You can choose between four resolutions.
        It gets saved!
    Volume:
        Placeholder, does nothing.
    Brightness:
        Placeholder, does nothing.
    Controller Settings:
        Allows key binding changes. Does not save between launches for now.

Other extra features:
    Pseudo-spatial hashing for static tile collisions.
    Integration with Tiled map editor.
    Parallax scrolling background.
    Special tile collision properties -- ability to make certain tiles
        not collide or collide only from certain sides.
    Cutscene -- 
        Level 1
            displays a newspaper for now, the newspaper will become a story
            teller in our game.
            There's a space left open there for the band photo once we have 
            finished all the players.
        Level 2
            displays a map with the progress
    Layers to simplify drawing method. Eventually these will make the game 
        class much simpler.
    
    Level selector.
    Heads-up display.
    Tile triggers for enemy and player spawning.

PREVIOUS PREVIOUS ASSIGNMENT:
Las Vegas level -- new background and many new tiles such as neon signs,
    streetlights, and trash cans.
New enemy type -- gun guard: shoots projectiles from gun, with new sprites.
Layers -- See above
New cutscene -- See above
Alcohol poisoning -- You start losing health if your intoxication gets too
    high.
Checkpoints -- Spawn at checkpoint on death. Will perhaps have some effect when
    reaching a checkpoint in the future, also respawns as your character
Drunk -- Effect of drunkness changed to a visual effect rather than control
effect.
Special attacks -- S key does the special attack. Special attacks are specific 
    to the character. Cooldown rates are shown below the intox meter.
Resolution  -- Settings are now saved. If you open it again, it should remember
    the previous settings.
File Structure -- We no longer have all the python files in one folder.
Damage Indication -- Enemies and Players now "Blink" when they are damaged.
Damage Tiles -- There are now tiles at the bottom of pits that instantly kill
    the player or enemies that fall in.

    
PREVIOUS ASSIGNMENT:

Respawn bugfix -- Fixed issue where game hanging on spawn/respawn 
(bc reloading stuff) would mess with the Dts and would thus cause plenty of
updates to happen before drawing. 
    
Massive class hierarchy rearrangements -- Attacks now inherit from GameObject
so they can be affected by gravity, follow preservation of momentum, and have
fewer reimplementation of methods. Actors now inherit from... Actor.

Attack code and updates refactored in game.py -- Entities now mostly update
via layers, simplifying the update code. Attacks are now GameObjects, so 
they can collide more normally. They also now get destroyed when they hit 
non-solid tiles.

Attack system refactored -- It now follows a normal object-oriented structure
with a normal factory rather than being stringly typed.

Metronomes -- Ugly timing code has been refactored into a reusable metronome 
module.

Frames refactoring -- Use of generators and first class functions to improve
the ease of implementing new sprite animations. In addition, sprite
animations now actually work as expected, instead of sometimes not proceeding
in the proper orders.
    
CURRENT ASSIGNMENT:    
    
Keyboard controls and game controller settings added.

Blocking added.

Bouncer "boss" enemy added. The idea is that it should force the player
to utilize the new blocking ability and have an obvious tell.

Barriers added. These force the player to kill all nearby enemies
before opening the barrier.

New backgrounds, tiles, and cutscene.

Sound for guitar crash temporarely taken from :
http://soundfxnow.com/sound-fx/acoustic-guitar-smash/

IMPROVEMENTS LIST FOR ASSIGNMENT 9

1. While dead, the game would incorrectly accumulate dt and apply it all
at respawn.

The dt was set to zero right before spawning so that the accumulation of
time while dead wouldn't affect gameplay.

2. Attacks went through walls

Attack code and updates refactored in game.py -- Entities now mostly update
via layers, simplifying the update code. Attacks are now GameObjects, so
they can collide more normally. They also now get destroyed when they hit
non-solid tiles.

3. Melee attacks would start and stop at times that weren't synced to the
attack key.

Metronomes -- Ugly timing code has been refactored into a reusable
metronome module.

4. Couldn't go back to the main menu from the level select screen.

Added an option "Main Menu" to go back to the main menu.

5. If you passed a checkpoint and then went backwards and died, you
wouldn't respawn there.

Changed the checkpoint system to implement forward progress rules.

6. Our melee attacks were too weak

We made them deal more damage.

7. Our lava looked unrealistic. It was a simple orange square.

The orange square was replaced with fire art.

8. Enemies were not being pushed away when hit

Changed the order updates were happening in as the applied force was
getting "canceled" before it could be actually applied.

9. Roofs were improperly tiled, so they didn't line up.

The art was changed so that roof lines were an integer factor of the tile size
so they lined up.

10. Our first cutscene was bland.

We added a voiceover.

PYLINT NOTES

Use pylint -d C0103 <filename>.py

We use a different naming convention and didn't have time to figure out an
appropriate regex, so just use the ignore for the namings warning.

Some functions and methods were not afforded docstrings due to time constraints
and/or self-explanatoriness.

We did not have time to fix the unused imports warnings from game.py due to
all of the keyboard locals.

The unused lambda warnings in main.py are erroneous; they are necessary due to
the state machine implementation.
